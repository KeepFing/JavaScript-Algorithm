
/**
 *
 * @author WangWen 2019年01月09日
 * Description  常用的JavaScript正则表达式
 * @Param { }
 * @Return {}
 * @Version 1.0
 * 
 * */

/*
 	一、校验数字的js正则表达式
 * */

new RegExp('^[0-9]*$')  		//数字

new RegExp('^d{n}$')  			//n位的数字

new RegExp('^d{n,}$')			//至少n位的数字

new RegExp('^d{m,n}$')			//m-n位的数字

new RegExp('^(0|[1-9][0-9]*)$')			//0和非0开头的数字

new RegExp('^([1-9][0-9]*)+(.[0-9]{1,2})?$')			//非零开头的最多带两位小数的数字

new RegExp('^(-)?d+(.d{1,2})?$')		//带1-2位小数的正数或负数

new RegExp('^(-|+)?d+(.d+)?$')			//正数、负数、和小数

new RegExp('^[0-9]+(.[0-9]{2})?$')		//有两位小数的正数

new RegExp('^[0-9]+(.[0-9]{1,3})?$')	//有1~3位小数的正实数

new RegExp('^[1-9]d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$')		//非零的正整数

new RegExp('^-[1-9][]0-9"*$ 或 ^-[1-9]d*$')			//非零的负整数

new RegExp('^d+$ 或 ^[1-9]d*|0$')			//非负整数

new RegExp('^-[1-9]d*|0$ 或 ^((-d+)|(0+))$')		//非正整数

new RegExp('^d+(.d+)?$ 或 ^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$')	//非负浮点数

new RegExp('^((-d+(.d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$')		//非正浮点数

//正浮点数
new RegExp('^[1-9]d*.d*|0.d*[1-9]d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$')
//负浮点数
new RegExp('^-([1-9]d*.d*|0.d*[1-9]d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$')

new RegExp('^(-?d+)(.d+)?$ 或 ^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$') //浮点数


/*
 	二、校验字符的js正则表达式
 * */

new RegExp('^[u4e00-u9fa5]{0,}$')		//汉字

new RegExp('^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$')		//英文和数字

new RegExp('^.{3,20}$')			//长度为3-20的所有字符

new RegExp('^[A-Za-z]+$')		//由26个英文字母组成的字符串

new RegExp('^[A-Z]+$')			//由26个大写英文字母组成的字符串

new RegExp('^[a-z]+$')			//由26个小写英文字母组成的字符串

new RegExp('^[A-Za-z0-9]+$')			//由数字和26个英文字母组成的字符串

new RegExp('^w+$ 或 ^w{3,20}$')			//中文、英文、数字包括下划线

new RegExp('^[u4E00-u9FA5A-Za-z0-9]+$')			//中文、英文、数字但不包括下划线等符号

new RegExp('[^%&\',;=?$x22]+')			//可以输入含有^%&',;=?$"等字符

new RegExp('[^~x22]+')			//禁止输入含有~的字符


/*
 	三、特殊需求js正则表达式
 	
 * */


new RegExp('/^[A-Za-z0-9._%-]+@([A-Za-z0-9-]+.)+[A-Za-z]{2,4}$/')			//Email邮箱地址

new RegExp('[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?')			//url域名

new RegExp('[a-zA-z]+://[^s]* 或 ^http://([w-]+.)+[w-]+(/[w-./?%&=]*)?$')			//InternetURL

new RegExp('^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])d{8}$')			//手机号码

new RegExp('^((d{3,4}-)|d{3.4}-)?d{7,8}$')			//国内电话号码

new RegExp('^[1-9]d{5}[1-9]d{3}((0d)|(1[0-2]))(([0|1|2]d)|3[0-1])d{4}$')			//18位身份证

new RegExp('^[a-zA-Z]w{5,17}$')			//密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)

new RegExp('^(?=.*d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$')			//强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)

new RegExp('^d{4}-d{1,2}-d{1,2}')			//日期格式


